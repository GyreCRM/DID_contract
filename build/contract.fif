"Asm.fif" include
// automatically generated from `C:\Users\VLAD\AppData\Local\toncli\toncli\func-libs\error_codes.func` `C:\Users\VLAD\AppData\Local\toncli\toncli\func-libs\math.func` `C:\Users\VLAD\AppData\Local\toncli\toncli\func-libs\stdlib.func` `D:\Career\TON\FunC_basics\DID\func\DID_contract.func` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  DECLPROC load_data
  DECLPROC parse_sender_address
  DECLPROC recv_internal
  106667 DECLMETHOD certificate
  69195 DECLMETHOD manager
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  load_data PROCINLINE:<{
    // 
    c4 PUSH	//  ds
    CTOS	//  data
    LDMSGADDR	//  manager data
    DUP	//  manager data data
    SREFS	//  manager data _7
    0 EQINT	//  manager data _9
    IF:<{	//  manager data
      DROP	//  manager
      NEWDICT	//  manager _10
    }>ELSE<{	//  manager data
      LDREF	//  manager _17 _16
      DROP	//  manager dict
    }>
  }>
  parse_sender_address PROCINLINE:<{
    //  in_msg_full
    CTOS	//  cs
    4 LDU	//  _11 _10
    NIP	//  cs
    LDMSGADDR	//  _13 _12
    DROP	//  sender_address
  }>
  recv_internal PROC:<{
    //  msg_value in_msg_full in_msg_body
    1 2 BLKDROP2	//  in_msg_full in_msg_body
    32 LDU	//  in_msg_full op in_msg_body
    64 LDU	//  in_msg_full op _67 _66
    NIP	//  in_msg_full op in_msg_body
    s0 s2 XCHG	//  in_msg_body op in_msg_full
    parse_sender_address INLINECALLDICT	//  in_msg_body op sender_address
    load_data INLINECALLDICT	//  in_msg_body op sender_address manager_address dict
    s3 PUSH	//  in_msg_body op sender_address manager_address dict op
    1 EQINT	//  in_msg_body op sender_address manager_address dict _17
    IFJMP:<{	//  in_msg_body op sender_address manager_address dict
      2 2 BLKDROP2	//  in_msg_body manager_address dict
      s0 s2 XCHG	//  dict manager_address in_msg_body
      32 LDU	//  dict manager_address key in_msg_body
      DUP	//  dict manager_address key in_msg_body in_msg_body
      SDEMPTY	//  dict manager_address key in_msg_body _23
      103 THROWIFNOT
      DUP	//  dict manager_address key in_msg_body in_msg_body
      SREMPTY	//  dict manager_address key in_msg_body _26
      105 THROWIF
      LDREF	//  dict manager_address key _73 _72
      DROP	//  dict manager_address key hash_ref_cell
      CTOS	//  dict manager_address key hash_slice
      DUP	//  dict manager_address key hash_slice hash_slice
      SBITS	//  dict manager_address key hash_slice hash_slice_size
      DUP	//  dict manager_address key hash_slice hash_slice_size hash_slice_size
      0 EQINT	//  dict manager_address key hash_slice hash_slice_size _37
      106 THROWIF
      LDSLICEX	//  dict manager_address key _75 _74
      DROP	//  dict manager_address key hash
      s0 s1 s3 XCHG3
      32 PUSHINT	//  manager_address hash key dict _43=32
      DICTUSET	//  manager_address dict
      NEWC
      ROT	//  dict _45 manager_address
      STSLICER	//  dict _46
      STREF	//  _47
      ENDC	//  _48
      c4 POP
    }>	//  in_msg_body op sender_address manager_address dict
    s0 s3 XCHG	//  in_msg_body dict sender_address manager_address op
    2 EQINT	//  in_msg_body dict sender_address manager_address _51
    IF:<{	//  in_msg_body dict sender_address manager_address
      SWAP	//  in_msg_body dict manager_address sender_address
      SDEQ	//  in_msg_body dict _53
      102 THROWIFNOT
      NEWC	//  in_msg_body dict _55
      s0 s2 XCHG	//  _55 dict in_msg_body
      LDMSGADDR	//  _55 dict _77 _76
      DROP	//  _55 dict _56
      s1 s2 XCHG	//  dict _55 _56
      STSLICER	//  dict _58
      STREF	//  _59
      ENDC	//  _60
      c4 POP
    }>ELSE<{	//  in_msg_body dict sender_address manager_address
      4 BLKDROP	// 
      3 THROW
    }>
  }>
  certificate PROC:<{
    //  student_id
    load_data INLINECALLDICT	//  student_id _12 _13
    NIP	//  student_id dict
    s1 s(-1) PUXC
    32 PUSHINT	//  student_id student_id dict _6=32
    DICTUGET
    NULLSWAPIFNOT	//  student_id certificate success
    104 THROWIFNOT
    DUP	//  student_id certificate certificate
    SBITS	//  student_id certificate slice_bits
    SWAP	//  student_id slice_bits certificate
  }>
  manager PROC:<{
    // 
    load_data INLINECALLDICT	//  _3 _4
    DROP	//  manager_address
  }>
}END>c
