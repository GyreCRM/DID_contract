cell udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUSET";
int equal_slices (slice a, slice b) asm "SDEQ";

(slice, cell) load_data() inline {
	cell ds = get_data();
	slice data = ds.begin_parse();
    slice manager = data~load_msg_addr();
    if (data.slice_refs() == 0) {
		return (manager, new_dict());
	} 
    else { cell dict = data~load_ref();
        return (manager, dict); }
}

(slice) parse_sender_address(cell in_msg_full) inline {
var cs = in_msg_full.begin_parse();   ;; cell storage; cell into slice
var flags = cs~load_uint(4);  ;; subtract(take away) flags

slice sender_address = cs~load_msg_addr(); ;; get sender address
return sender_address;
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body)  {
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    slice sender_address = parse_sender_address(in_msg_full);
    
    (slice manager_address, cell dict) = load_data();
    ;;throw_unless(1001,  equal_slices(manager_address, sender_address));  ;; check if certificate 
    ;; is issued by the right authority (turned off for easier testing)

    if (op == 1){  ;; add value to the dictionary
        int key = in_msg_body~load_uint(32);                        ;; load key
        throw_unless(103,in_msg_body.slice_data_empty?());          ;; check that slice is empty
        throw_if(105,in_msg_body.slice_refs_empty?());              ;; check reference existance
        cell hash_ref_cell = in_msg_body~load_ref();
        slice hash_slice = hash_ref_cell.begin_parse();
        int hash_slice_size = hash_slice.slice_bits();              ;; number of bits in dict slice 
        throw_if(106, hash_slice_size == 0);                        ;; check that reference cell is not empty
        slice hash = hash_slice~load_bits(hash_slice_size);
        dict~udict_set(32, key, hash);                              ;; add/set value to the dict
        set_data(begin_cell()  ;; saving the data
                        .store_slice(manager_address)  
                        .store_ref(dict)
                        .end_cell());
        return ();
    } 
    else {
        if (op == 2 ){  ;; change manager address 
        throw_unless(102, equal_slices(manager_address, sender_address));  ;; only manager can change address
        int workchain = in_msg_body~load_int(32);
        set_data(begin_cell()
                        .store_slice(in_msg_body~load_msg_addr())  ;; saving new manager address
                        .store_ref(dict)
                        .end_cell()
            );
            return ();
        }
        else { throw(3);}
    }
}

 (int, int, slice) certificate(int student_id) method_id {
	(slice manager_address, cell dict) = load_data(); ;; manager address not used
    (slice certificate, int success) = dict.udict_get?(32, student_id);
    throw_unless(104, success);
    int slice_bits = certificate.slice_bits();
	return (student_id, slice_bits, certificate);
}

slice manager() method_id {
    (slice manager_address, cell dict) = load_data();
    return manager_address;
}



;; EROR CODES:

;; 102 - not a manager tries to change manager address 
;; 103 - in_msg_body slice has unread bits
;; 104 - no data found in dict for that key
;; 105 - no reference cell in msg
;; 106 - reference cell is empty 
;; 107 - dict cell has 0 bits
;; 1001 - not a manger wants to add data
