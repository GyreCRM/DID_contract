() set_default_initial_data() impure {
  cell dict = new_dict();
  slice hash = "kQBtO0gynpAGdXQn0lyYL2QhhGQQ_4PHe2kIM50eSuP9NX7z";
  dict~udict_set(32, 1, hash);
  set_data(begin_cell()
            .store_slice("kQDmznN8tOKzSQxHTzMTege2QKFcrCwnkTNRtY2cubGB1IKu")  ;; store owners address 
            .store_ref(dict) ;; store dict as ref cell
            .end_cell());
}

int __test_adding_value() {
    set_default_initial_data();

    cell hash_ref_cell = begin_cell()
	                      .store_slice("VLad") 
                        .end_cell();

    slice message_body = begin_cell()
                    .store_uint(1, 32)  ;; op
	                  .store_uint(12345, 64) ;; query id
                    .store_uint(3, 32) ;; key 
                    .store_ref(hash_ref_cell)
                    .end_cell().begin_parse();

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice("00") ;; sender's address; will be rewritten anyway
            .store_coins(1)  ;; amount of ton
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; execution of serialization primitives ends
            ;;(includes 14 parameters)
            .store_slice(message_body)
            .end_cell();

    var (int gas_used1, _) = invoke_method(recv_internal, [1, msg, message_body]);  ;;
    return gas_used1; 
}

slice __test_get_certificate() {
    set_default_initial_data();

    var (int gas_used2, stack) = invoke_method(certificate, [1]);  ;; calling get method

    [int key ,int bits , slice hash] = stack; 
    throw_unless(101, bits == 384); 
    return hash;
}